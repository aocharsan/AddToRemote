1)Given a square matrix, calculate the absolute difference between the sums of its diagonals.

For example, the square matrix  is shown below:

1 2 3
4 5 6
9 8 9  
The left-to-right diagonal = . The right to left diagonal = . Their absolute difference is .

Function description

Complete the  function in the editor below.

diagonalDifference takes the following parameter:

int arr[n][m]: an array of integers
Return

int: the absolute diagonal difference
Input Format

The first line contains a single integer, , the number of rows and columns in the square matrix .
Each of the next  lines describes a row, , and consists of  space-separated integers .

Constraints



Output Format

Return the absolute difference between the sums of the matrix's two diagonals as a single integer.

Sample Input

3
11 2 4
4 5 6
10 8 -12
Sample Output

15
Explanation

The primary diagonal is:

11
   5
     -12
Sum across the primary diagonal: 11 + 5 - 12 = 4

The secondary diagonal is:

     4
   5
10
Sum across the secondary diagonal: 4 + 5 + 10 = 19
Difference: |4 - 19| = 15

Note: |x| is the absolute value of x





***********************************************************************************
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<Integer>> arr) {
    // Write your code here

        int[][] array = new int[arr.size()][]; 
    for (int i = 0; i < array.length; i++) { 
        array[i] = new int[arr.get(i).size()]; 
    } 
    for(int i=0; i<arr.size(); i++){ 
        for (int j = 0; j < arr.get(i).size(); j++) { 
            array[i][j] = arr.get(i).get(j); 
        } 
    } 
   int sum1=0;
   int sum2=0;
    for(int i=0;i<array.length;i++)
{
    for(int j=0;j<array.length;j++)

{
    if(i==j)
      sum1+=array[i][j];
    if(j==array.length-1-i)
    sum2+=array[i][j];
    
}    
    
    
}
    
    int diff=sum1-sum2;
return Math.abs(diff);
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<List<Integer>> arr = new ArrayList<>();

        IntStream.range(0, n).forEach(i -> {
            try {
                arr.add(
                    Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(toList())
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        int result = Result.diagonalDifference(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
------------------------------------------------------------------------------------------------------------------------------------

2)https://www.hackerrank.com/challenges/migratory-birds/problem?isFullScreen=true
 HashMap<Integer,Integer> map = new HashMap<>();
methods mostly Used---->

V put(Object key, Object value)	It is used to insert an entry in the map.
boolean containsValue(Object value)	This method returns true if some value equal to the value exists within the map, else return false.
boolean containsKey(Object key)	This method returns true if some key equal to the key exists within the map, else return false.
V get(Object key)             	This method returns the object that contains the value associated with the key.


Given an array of bird sightings where every element represents a bird type id, determine the id of the most frequently sighted type. If more than 1 type has been spotted that maximum amount, return the smallest of their ids.

Example

There are two each of types  and , and one sighting of type . Pick the lower of the two types seen twice: type .

Function Description

Complete the migratoryBirds function in the editor below.

migratoryBirds has the following parameter(s):

int arr[n]: the types of birds sighted
Returns

int: the lowest type id of the most frequently sighted birds
Input Format

The first line contains an integer, , the size of .
The second line describes  as  space-separated integers, each a type number of the bird sighted.

Constraints

It is guaranteed that each type is , , , , or .
Sample Input 0

6
1 4 4 4 5 3
Sample Output 0

4
Explanation 0

The different types of birds occur in the following frequencies:

Type :  bird
Type :  birds
Type :  bird
Type :  birds
Type :  bird
The type number that occurs at the highest frequency is type , so we print  as our answer.

Sample Input 1

11
1 2 3 4 5 4 3 2 1 3 4
Sample Output 1

3
Explanation 1

The different types of birds occur in the following frequencies:

Type : 
Type : 
Type : 
Type : 
Type : 
Two types have a frequency of , and the lower of those is type .


----------------=======================================----------------------------------------------=============================

 public static int migratoryBirds(List<Integer> arr) {
    // Write your code here
     
                
                
    	 int countMax = 0;
    	    int highestElem = 0;
    	    HashMap<Integer,Integer> map = new HashMap<>();
    	    for(int i=0;i<arr.size();i++){
    	        if(map.containsKey(arr.get(i))){
    	            map.put(arr.get(i),map.get(arr.get(i))+1);
    	            if(map.get(arr.get(i)) > countMax){
    	                countMax = map.get(arr.get(i));
    	                highestElem = arr.get(i);
    	            }
    	            else if(map.get(arr.get(i)) == countMax){
    	                highestElem = Math.min(highestElem,arr.get(i));
    	            }
    	        }
    	        else{
    	            map.put(arr.get(i),1);
    	        }
    	    }  
                
    	    return highestElem;
   }
